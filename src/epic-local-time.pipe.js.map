{"version":3,"sources":["../dev/src/epic-local-time.pipe.ts"],"names":[],"mappings":"AAAA,SAAC;AACG,OAAO,EAAE,IAAA,EAAoB,MAAO,eAAA,CAAgB;AAExD,kHAAkH;AAE9G;IAAA;IAmCJ,CAAC;IAlCO,qCAAS,GAAT,UAAU,OAAe,EAAE,MAAc;QACrC,EAAE,CAAA,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACV,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC,CAAC;IACjD,CAAC;IAEL;0BACsB;IAClB,mCAAO,GAAP,UAAQ,CAAC;QACL,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YACT,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;QAChB,CAAC;QACD,MAAM,CAAC,CAAC,CAAC;IACb,CAAC;IAEL;;OAEG;IACC,iCAAK,GAAL,UAAM,IAAU,EAAE,MAAc;QAC5B,IAAI,MAAM,GAAW,MAAM,CAAC;QAC5B,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC/D,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;QACjE,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QAC5D,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QAC7D,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QAC/D,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAOT,wBAAC;AAAD,CAnCI,AAmCH;;AANU,4BAAU,GAA0B;IAC/C,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAC,IAAI,EAAE,eAAe,EAAC,EAAG,EAAE;CAChD,CAAC;AACF,kBAAkB;AACX,gCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"epic-local-time.pipe.js","sourceRoot":"","sourcesContent":["//ANGULAR\r\n    import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/* EpicUTCDatePipe - returns a utc date formatted. look into replacing this with the built in angular date pipe */\r\n    \r\n    export class EpicLocalTimePipe implements PipeTransform {\r\n        transform(isoDate: string, config: string):  string{\r\n            if(!isoDate) {\r\n                return null;\r\n            }\r\n            return this.parse(new Date(isoDate), config);\r\n        }\r\n\r\n    /* addZero() - adds a preceding 0 to a number under 10\r\n        @params: number */\r\n        addZero(i): string {\r\n            if (i < 10) {\r\n                i = \"0\" + i;\r\n            }\r\n            return i;\r\n        }\r\n\r\n    /** parse()\r\n     * \r\n     */\r\n        parse(date: Date, format: string){\r\n            let result: string = format;\r\n            result = result.replace(\"yyyy\", date.getFullYear().toString());\r\n            result = result.replace(\"MM\", this.addZero(date.getMonth() + 1));\r\n            result = result.replace(\"dd\", this.addZero(date.getDate()));\r\n            result = result.replace(\"hh\", this.addZero(date.getHours()));\r\n            result = result.replace(\"mm\", this.addZero(date.getMinutes()));            \r\n            return result;\r\n        }\r\n    static decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'epicLocalTime'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}