{"version":3,"sources":["../dev/src/time-picker.component.ts"],"names":[],"mappings":"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","file":"time-picker.component.js","sourceRoot":"","sourcesContent":["//ANGULAR\n    import { Component, Input, Output, EventEmitter } from '@angular/core';\n    import { MdDialog } from '@angular/material';\n    import { BehaviorSubject } from 'rxjs/BehaviorSubject';\n    import { Observable } from 'rxjs/Observable';\n    import { TimePickerModal, Config, TimeDescriptors, States, Types} from './time-picker.modal';\n    import { Subscription } from \"rxjs/Subscription\";\n    import { Subject } from \"rxjs/Subject\";\n\n    export enum DisplayModes { LOCAL12 = 0, LOCAL24 = 1, UTC = 2 }\n\n/* TimePickerComponent */\n    \n    export class TimePickerComponent {\n\n//VARIABLES\n        //ENUMS\n        DisplayModes = DisplayModes;\n\n        //OBSERVABLES\n        private valueSubject: BehaviorSubject<Date> = new BehaviorSubject<Date>(null);\n        public valueObservable: Observable<Date> = this.valueSubject.asObservable();\n        subscriptions: Subscription[] = [];\n\n        private isOpenSubject: Subject<boolean> = new Subject() ;\n        public isOpenObservable: Observable<boolean> = this.isOpenSubject.asObservable();\n        private _isOpen: boolean = false;\n\n        //INPUTS\n         utcString: string;\n         placeholder: string = \"\";\n         format: string = \"medium\"\n         state: States =  States.YEAR;\n         type: Types = Types.DATETIME;\n         displayMode: DisplayModes = DisplayModes.LOCAL24;\n         disabled: boolean = false;\n            get isOpen(): boolean{\n                        return this._isOpen;\n                    }\n                    set isOpen(request: boolean) {\n                        this.isOpenSubject.next(request);\n                    }\n            get value(): Date {\n                        let d = this.valueSubject.getValue();\n                        if(d){\n                            let t = d.getTime();\n                            if(t != t){\n                                return null;\n                            }\n                        }\n                        return d;\n                    };\n                    set value( value: Date) {\n                        this.valueSubject.next(value);\n                    }\n\n        //OUTPUTS\n         utcStringChange: EventEmitter<string> = new EventEmitter<string>();\n         valueChange: EventEmitter<Date> = new EventEmitter<Date>();\n         onClose: EventEmitter<Date> = new EventEmitter<Date>();\n         isOpenChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n//LIFE CYCLE HOOKS\n        constructor( public dialog: MdDialog ) {}\n\n        ngOnInit() {\n            this.valueObservable.subscribe((time: Date)=>{\n                if(time){\n                    this.valueChange.emit(time);\n                    this.utcStringChange.emit(time.toUTCString());\n                }\n            });\n            this.isOpenObservable.subscribe( (request: boolean) => {\n                if(request){\n                    this.open();\n                }\n            });\n        }\n\n        ngOnChanges(changes){\n            if(changes.value && changes.value.currentValue){\n                this.utcString = changes.value.currentValue.toUTCString();\n            }\n            else if(changes.utcString){\n                this.value = new Date(changes.utcString.currentValue());\n            }\n        }\n        ngOnDestroy(){\n            this.subscriptions.forEach(subscription => {\n                subscription.unsubscribe();\n            });\n        }\n\n//EVENT LISTENERS\n        open(){\n            if(this.disabled) return;\n            let descriptor: TimeDescriptors;\n            switch(this.displayMode){\n                case DisplayModes.UTC:\n                    descriptor = TimeDescriptors.Z;\n                break;\n                case DisplayModes.LOCAL24:\n                    descriptor = TimeDescriptors.HR24;\n                break;\n                case DisplayModes.LOCAL12:\n                    if(this.value.getHours() >= 12)\n                        descriptor = TimeDescriptors.PM;\n                    else\n                        descriptor = TimeDescriptors.AM;\n                break;\n            }\n            let data = {\n                config: new Config({\n                    date: this.value,\n                    descriptor: descriptor,\n                    state: this.state,\n                    type: this.type\n                })\n            };\n            console.log(data.config);\n            let modal = this.dialog.open(TimePickerModal, {\n                data: data,\n                disableClose: true\n            });\n            this.subscriptions.push(modal.afterClosed().subscribe(result => {\n                //EMIT THE RESULT IF THE OK BUTTON WAS CLICKED\n                if(result){\n                    this.value = result;\n                    this.onClose.emit(this.value);\n                }\n                //EMIT NULL IF THE CANCEL BUTTON WAS CLICKED\n                else{\n                    this.onClose.emit(null);\n                }\n            }));\n        }\n    static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n        moduleId: module.id,\n        selector: 'epic-time-picker',\n        templateUrl: './time-picker.component.html',\n        styleUrls: [\n            './time-picker.component.scss', \n        ]\n    }, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'utcString': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'format': [{ type: Input },],\n'state': [{ type: Input },],\n'type': [{ type: Input },],\n'displayMode': [{ type: Input },],\n'disabled': [{ type: Input },],\n'isOpen': [{ type: Input },],\n'value': [{ type: Input },],\n'utcStringChange': [{ type: Output },],\n'valueChange': [{ type: Output },],\n'onClose': [{ type: Output },],\n'isOpenChange': [{ type: Output },],\n};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}